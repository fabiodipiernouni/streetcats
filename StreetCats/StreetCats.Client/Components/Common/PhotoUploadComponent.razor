@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject ILogger<PhotoUploadComponent> Logger
@inject IConfiguration Configuration

<div class="photo-upload-component">
    <!-- Area di Drop e Selezione File -->
    <div class="upload-area @(isDragOver ? "drag-over" : "") @(isUploading ? "uploading" : "")"
         @ondrop="OnDrop"
         @ondragover="OnDragOver"
         @ondragenter="OnDragEnter"
         @ondragleave="OnDragLeave"
         @onclick="TriggerFileInput">
        
        @if (string.IsNullOrEmpty(PhotoUrl) && !isUploading)
        {
            <div class="upload-placeholder">
                <svg class="upload-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                </svg>
                <p class="upload-text">
                    <strong>Clicca per selezionare</strong> o trascina qui la foto del gatto
                </p>
                <p class="upload-hint">PNG, JPG, WebP fino a 5MB</p>
            </div>
        }
        else if (isUploading)
        {
            <div class="upload-progress">
                <div class="spinner"></div>
                <p>Caricamento foto...</p>
                @if (uploadProgress > 0)
                {
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @(uploadProgress)%"></div>
                    </div>
                    <p class="progress-text">@(uploadProgress)%</p>
                }
            </div>
        }
        else if (!string.IsNullOrEmpty(PhotoUrl))
        {
            <div class="photo-preview">
                <img src="@GetPhotoDisplayUrl()" alt="Foto gatto" class="preview-image" />
                <div class="photo-overlay">
                    <button type="button" class="btn-change" @onclick:stopPropagation="true" @onclick="TriggerFileInput">
                        Cambia Foto
                    </button>
                    <button type="button" class="btn-remove" @onclick:stopPropagation="true" @onclick="RemovePhoto">
                        Rimuovi
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- Input File Nascosto -->
    <InputFile @ref="fileInput" 
               OnChange="OnFileSelected" 
               accept="image/*" 
               style="display: none;" />

    <!-- Messaggio di Errore -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">
            <svg class="error-icon" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
            </svg>
            @errorMessage
        </div>
    }

    <!-- Info File -->
    @if (!string.IsNullOrEmpty(fileName))
    {
        <div class="file-info">
            <small class="text-muted">
                üìé @fileName
                @if (fileSize > 0)
                {
                    <span> ‚Ä¢ @FormatFileSize(fileSize)</span>
                }
            </small>
        </div>
    }
</div>

@code {
    [Parameter] public string? PhotoUrl { get; set; }
    [Parameter] public EventCallback<string> PhotoUrlChanged { get; set; }
    [Parameter] public EventCallback<PhotoUploadResult> OnUploadCompleted { get; set; }
    [Parameter] public EventCallback OnUploadError { get; set; }
    [Parameter] public bool IsRequired { get; set; } = false;
    [Parameter] public int MaxFileSizeMB { get; set; } = 5;

    private InputFile? fileInput;
    private bool isDragOver = false;
    private bool isUploading = false;
    private int uploadProgress = 0;
    private string? errorMessage;
    private string? fileName;
    private long fileSize = 0;

    // Configurazione API
    private string apiBaseUrl => Configuration["ApiSettings:BaseUrl"] ?? "http://localhost:3000/api";
    private string uploadEndpoint => $"{apiBaseUrl}/upload/images";

    protected override async Task OnInitializedAsync()
    {
        // Setup JavaScript interop per drag & drop avanzato
        await JSRuntime.InvokeVoidAsync("StreetCatsInterop.initializePhotoUpload", DotNetObjectReference.Create(this));
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        await ProcessSelectedFile(file);
    }

    private async Task ProcessSelectedFile(IBrowserFile file)
    {
        try
        {
            ClearError();

            // Validazione file
            var validationResult = ValidateFile(file);
            if (!validationResult.IsValid)
            {
                ShowError(validationResult.ErrorMessage);
                return;
            }

            fileName = file.Name;
            fileSize = file.Size;
            isUploading = true;
            uploadProgress = 0;
            StateHasChanged();

            // Upload al backend
            var result = await UploadFileToBackend(file);

            if (result.Success)
            {
                PhotoUrl = result.PhotoUrl;
                await PhotoUrlChanged.InvokeAsync(PhotoUrl);
                await OnUploadCompleted.InvokeAsync(result);
                
                Logger.LogInformation("‚úÖ Foto caricata con successo: {PhotoUrl}", result.PhotoUrl);
            }
            else
            {
                ShowError(result.ErrorMessage ?? "Errore durante caricamento");
                await OnUploadError.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‚ùå Errore upload foto");
            ShowError("Errore imprevisto durante caricamento");
            await OnUploadError.InvokeAsync();
        }
        finally
        {
            isUploading = false;
            uploadProgress = 0;
            StateHasChanged();
        }
    }

    private async Task<PhotoUploadResult> UploadFileToBackend(IBrowserFile file)
    {
        try
        {
            // Prepara FormData usando JavaScript
            var fileInfo = await JSRuntime.InvokeAsync<string>("StreetCatsInterop.uploadPhoto", 
                uploadEndpoint, 
                DotNetObjectReference.Create(file),
                DotNetObjectReference.Create(this));

            var result = JsonSerializer.Deserialize<ApiResponse<PhotoUploadData>>(fileInfo, 
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            if (result?.Success == true && result.Data != null)
            {
                return new PhotoUploadResult
                {
                    Success = true,
                    PhotoUrl = result.Data.PhotoUrl,
                    FileName = result.Data.FileName,
                    FileSize = result.Data.Size,
                    MimeType = result.Data.MimeType
                };
            }
            else
            {
                return new PhotoUploadResult
                {
                    Success = false,
                    ErrorMessage = result?.Message ?? "Upload fallito"
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‚ùå Errore chiamata API upload");
            return new PhotoUploadResult
            {
                Success = false,
                ErrorMessage = ex.Message
            };
        }
    }

    [JSInvokable]
    public void UpdateUploadProgress(int progress)
    {
        uploadProgress = progress;
        InvokeAsync(StateHasChanged);
    }

    private FileValidationResult ValidateFile(IBrowserFile file)
    {
        // Controllo tipo file
        if (!IsValidImageType(file.ContentType))
        {
            return new FileValidationResult(false, "Tipo file non supportato. Usa JPG, PNG o WebP.");
        }

        // Controllo dimensione
        var maxBytes = MaxFileSizeMB * 1024 * 1024;
        if (file.Size > maxBytes)
        {
            return new FileValidationResult(false, $"File troppo grande. Massimo {MaxFileSizeMB}MB consentiti.");
        }

        return new FileValidationResult(true, null);
    }

    private bool IsValidImageType(string contentType)
    {
        var validTypes = new[] { "image/jpeg", "image/jpg", "image/png", "image/webp" };
        return validTypes.Contains(contentType.ToLower());
    }

    private string GetPhotoDisplayUrl()
    {
        if (string.IsNullOrEmpty(PhotoUrl)) return "";

        // Se √® un URL completo, usalo direttamente
        if (PhotoUrl.StartsWith("http"))
        {
            return PhotoUrl;
        }

        // Se √® un path relativo, costruisci URL completo
        var baseUrl = apiBaseUrl.Replace("/api", "");
        return $"{baseUrl}{PhotoUrl}";
    }

    private async Task RemovePhoto()
    {
        PhotoUrl = null;
        fileName = null;
        fileSize = 0;
        ClearError();
        
        await PhotoUrlChanged.InvokeAsync(PhotoUrl);
        StateHasChanged();
    }

    private async Task TriggerFileInput()
    {
        if (fileInput != null && !isUploading)
        {
            await JSRuntime.InvokeVoidAsync("StreetCatsInterop.triggerFileInput", fileInput.Element);
        }
    }

    // Drag & Drop Event Handlers
    private void OnDragOver(DragEventArgs e) => e.preventDefault();
    private void OnDragEnter(DragEventArgs e) { isDragOver = true; StateHasChanged(); }
    private void OnDragLeave(DragEventArgs e) { isDragOver = false; StateHasChanged(); }

    private async Task OnDrop(DragEventArgs e)
    {
        isDragOver = false;
        StateHasChanged();

        // Gestito via JavaScript per accesso ai file
        await JSRuntime.InvokeVoidAsync("StreetCatsInterop.handleFileDrop", 
            DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task HandleDroppedFile(string fileName, string contentType, long size, string base64Data)
    {
        try
        {
            // Simula IBrowserFile per processamento
            var fileData = Convert.FromBase64String(base64Data);
            // TODO: Implementare wrapper per IBrowserFile da dati raw
            // Per ora, mostra messaggio informativo
            ShowError("Drag & drop implementato - usa click per selezionare file");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‚ùå Errore gestione file drag & drop");
            ShowError("Errore elaborazione file trascinato");
        }
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        StateHasChanged();
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        return $"{bytes / (1024 * 1024):F1} MB";
    }

    // Data Models
    public class PhotoUploadResult
    {
        public bool Success { get; set; }
        public string? PhotoUrl { get; set; }
        public string? FileName { get; set; }
        public long FileSize { get; set; }
        public string? MimeType { get; set; }
        public string? ErrorMessage { get; set; }
    }

    public class PhotoUploadData
    {
        public string PhotoUrl { get; set; } = "";
        public string FileName { get; set; } = "";
        public long Size { get; set; }
        public string MimeType { get; set; } = "";
    }

    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public T? Data { get; set; }
        public string? Message { get; set; }
    }

    private record FileValidationResult(bool IsValid, string? ErrorMessage);
}

<style>
.photo-upload-component {
    width: 100%;
    max-width: 400px;
}

.upload-area {
    border: 2px dashed #d1d5db;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    background: #f9fafb;
    position: relative;
    overflow: hidden;
}

.upload-area:hover {
    border-color: #6366f1;
    background: #f0f9ff;
}

.upload-area.drag-over {
    border-color: #10b981;
    background: #ecfdf5;
    transform: scale(1.02);
}

.upload-area.uploading {
    pointer-events: none;
    opacity: 0.8;
}

.upload-placeholder {
    color: #6b7280;
}

.upload-icon {
    width: 48px;
    height: 48px;
    margin: 0 auto 1rem;
    color: #9ca3af;
}

.upload-text {
    margin: 0.5rem 0;
    font-size: 1rem;
}

.upload-hint {
    font-size: 0.875rem;
    color: #9ca3af;
    margin: 0;
}

.upload-progress {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
}

.spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #e5e7eb;
    border-top: 4px solid #6366f1;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #6366f1, #8b5cf6);
    border-radius: 4px;
    transition: width 0.3s ease;
}

.progress-text {
    font-size: 0.875rem;
    font-weight: 600;
    color: #6366f1;
}

.photo-preview {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
}

.preview-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    display: block;
}

.photo-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.photo-preview:hover .photo-overlay {
    opacity: 1;
}

.btn-change, .btn-remove {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-change {
    background: #6366f1;
    color: white;
}

.btn-change:hover {
    background: #5856eb;
}

.btn-remove {
    background: #ef4444;
    color: white;
}

.btn-remove:hover {
    background: #dc2626;
}

.error-message {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    margin-top: 1rem;
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
    border-radius: 6px;
    font-size: 0.875rem;
}

.error-icon {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
}

.file-info {
    margin-top: 0.5rem;
    text-align: left;
}

.text-muted {
    color: #6b7280;
}
</style>