@page "/login"
@inject IAuthService AuthService
@inject NavigationManager Navigation
@using StreetCats.Client.Components.Common

<PageTitle>üîë Login - STREETCATS</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-orange-400 to-green-400 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <!-- Header -->
        <div class="text-center">
            <div class="text-6xl mb-4">üê±</div>
            <h2 class="text-3xl font-bold text-white mb-2">
                Accedi a STREETCATS
            </h2>
            <p class="text-white opacity-90">
                Aiuta i gatti randagi della tua citt√†
            </p>
        </div>

        <!-- Login Form -->
        <div class="bg-white rounded-lg shadow-xl p-8">
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                
                <!-- Error Alert -->
                <ErrorAlert IsVisible="@(!string.IsNullOrEmpty(errorMessage))" 
                          Message="@errorMessage" 
                          Type="ErrorAlert.AlertType.Error"
                          OnDismiss="@(() => errorMessage = string.Empty)" />

                <div class="space-y-6">
                    <!-- Username -->
                    <div>
                        <label for="username" class="block text-sm font-medium text-gray-700 mb-2">
                            üë§ Nome Utente
                        </label>
                        <InputText @bind-Value="loginModel.Username" 
                                 id="username"
                                 placeholder="Inserisci nome utente"
                                 class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-streetcats-orange focus:border-streetcats-orange" />
                        <ValidationMessage For="() => loginModel.Username" class="text-red-500 text-sm mt-1" />
                    </div>

                    <!-- Password -->
                    <div>
                        <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
                            üîí Password
                        </label>
                        <InputText @bind-Value="loginModel.Password" 
                                 type="password"
                                 id="password"
                                 placeholder="Inserisci password"
                                 class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-streetcats-orange focus:border-streetcats-orange" />
                        <ValidationMessage For="() => loginModel.Password" class="text-red-500 text-sm mt-1" />
                    </div>

                    <!-- Submit Button -->
                    <div>
                        <button type="submit" 
                              disabled="@isLoading"
                              class="w-full bg-streetcats-orange hover:bg-orange-600 disabled:bg-gray-400 text-white font-bold py-3 px-4 rounded-lg transition-colors flex items-center justify-center">
                            @if (isLoading)
                            {
                                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                                <span>Accesso in corso...</span>
                            }
                            else
                            {
                                <span>üîë Accedi</span>
                            }
                        </button>
                    </div>
                </div>
            </EditForm>

            <!-- Demo Info -->
            <div class="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <h4 class="text-sm font-medium text-blue-800 mb-2">üß™ Modalit√† Demo</h4>
                <p class="text-xs text-blue-600">
                    Inserisci qualsiasi username e password per testare l'applicazione.
                    <br/>
                    <strong>Esempi:</strong> admin/password, demo/demo, test/123456
                </p>
            </div>

            <!-- Links -->
            <div class="mt-6 text-center space-y-2">
                <p class="text-sm text-gray-600">
                    Non hai un account?
                    <button @onclick="@(() => Navigation.NavigateTo("/register"))"
                            class="text-streetcats-orange hover:text-orange-600 font-medium">
                        Registrati qui
                    </button>
                </p>
                <p class="text-sm">
                    <button @onclick="@(() => Navigation.NavigateTo("/"))"
                            class="text-gray-500 hover:text-gray-700">
                        ‚Üê Torna alla Home
                    </button>
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private bool isLoading = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Se gi√† autenticato, reindirizza alla home
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            var response = await AuthService.LoginAsync(loginModel);

            if (response.Success)
            {
                // Login riuscito, reindirizza alla home
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = response.Message;
                if (response.Errors?.Any() == true)
                {
                    errorMessage += " " + string.Join(", ", response.Errors);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Errore durante il login: " + ex.Message;
            Console.WriteLine($"Errore login: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}